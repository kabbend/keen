/*
 * Keen compiler 
 *
 * canon.h
 *
 * transform IR trees into canonical trees and basic blocks
 *
 * Copyright (C) 2005 Karim Ben Djedidia <kabend@free.fr> 
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
 * USA
 *
 */

#ifndef _CANON_H_
#define _CANON_H_

#include "ir.h"
#include "translate.h"
#include "insn.h"

/* hold a list of IR statements (irnode * of class STMT) */
typedef irnodeList stmtList;

/* 
 * BASIC BLOCK 
 */
typedef struct xBB
{
  label *l;		/* entry label of the basic block (may be internal one or function label) */
  frame *f;             /* if basic block is part of a function body, store reference to function frame */
  stmtList stmtlist;    /* list of IR statement nodes generated by translate phase */
  insnList insnlist;    /* list of corresponding IR instructions nodes, generated by kburg/insn selection phase */
  int marked;
} BB;

/* list of basic blocks (hold BB *) */
typedef List BBList;

/* a trace is a list of basic-blocks lists (hold BBList) */
typedef List trace;

trace get_canonical_trace (fragmentList l);

/* debugging functions */
void print_stmtList (stmtList l);

/* output functions */
void output_trace (trace t, int fd);

#endif
